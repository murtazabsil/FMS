
<%@ page language="java" %>
<%@ page session="true" %>
<%@ page import="java.util.List,com.itextpdf.text.pdf.PdfPCell,com.itextpdf.text.pdf.PdfPTable,java.sql.*,com.itextpdf.text.*,com.itextpdf.text.pdf.PdfWriter,java.io.*,java.util.*,java.util.Random,com.eResorts.MemberReviewsVO,com.eResorts.ReportBean,com.eResorts.GeneratePdfFile,com.eResorts.HeaderAndFooter"%>

<HEAD>


	<script LANGUAGE="Javascript" SRC="Images/validate.js"></script>


	<LINK href="css/styles.css" type="text/css" rel="stylesheet">

</HEAD>
<BODY class="SC">
<h4 align=center>Member Reviews</h4>
<%!

	private static String inputFile = "";
	private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
			Font.BOLD);
	private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
			Font.NORMAL, BaseColor.BLACK);
	private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 8,
			Font.NORMAL);
	private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 8,
			Font.BOLD);
	ByteArrayOutputStream baosPDF = null;
Map inputToexcel;
public String createPdf() {
	// TODO Auto-generated method stub
	String returnMessage = "";
	try {
		Document document = new  Document(PageSize.A4, 15, 15, 15, 20);
		PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(inputFile));
		writer.setPageEvent( new HeaderAndFooter());
		document.open();
		addMetaData(document,this.inputToexcel);
		addTitlePage(document,this.inputToexcel);
	//	addContent(document,this.inputToexcel);
		document.close();
		returnMessage = "Reprot created";
	} catch (Exception e) {
		returnMessage = "Error in file creation :"+e.getMessage();
		e.printStackTrace();
	}
	return returnMessage;
}

// iText allows to add metadata to the PDF which can be viewed in your Adobe
// Reader
// under File -> Properties
private static void addMetaData(Document document, Map inputToTxcel) {
	document.addTitle("PDF");
	document.addSubject("PASRF Report");
	document.addKeywords("PDF for PASRF Report");
	document.addAuthor("BSIL Tech Team");
	document.addCreator("BSIL Tech Team");
}

private static void addTitlePage(Document document, Map inputToexcel)
		throws DocumentException {
	Paragraph preface = new Paragraph();
	// We add one empty line
	if(inputToexcel != null){
		preface.add(new Paragraph((String)inputToexcel.get("reportname"), catFont));
	}
	addEmptyLine(preface, 1);
	// Lets write a big header


	addEmptyLine(preface, 1);
	// Will create: Report generated by: _name, _date
	preface.add(new Paragraph("Report generated on: " + new java.util.Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
			smallBold));
	addEmptyLine(preface, 1);
//	preface.add(new Paragraph((String)inputToexcel.get("saleperiod") ,				smallBold));
//	addEmptyLine(preface, 1);
//	preface.add(new Paragraph((String)inputToexcel.get("subheader") ,				smallBold));
//			addEmptyLine(preface, 1);
	/*	Anchor anchor = new Anchor("First Chapter", catFont);
	anchor.setName("First Chapter");

	// Second parameter is the number of the chapter
Chapter catPart = new Chapter(new Paragraph(anchor), 1);

	Paragraph subPara = new Paragraph("Subcategory 1", subFont);
	Section subCatPart = catPart.addSection(subPara);
	subCatPart.add(new Paragraph("Hello"));

	subPara = new Paragraph("Subcategory 2", subFont);
	subCatPart = catPart.addSection(subPara);
	subCatPart.add(new Paragraph("Paragraph 1"));
	subCatPart.add(new Paragraph("Paragraph 2"));
	subCatPart.add(new Paragraph("Paragraph 3"));
*/
	// Add a table
	createTable(preface, inputToexcel);

//	addEmptyLine(preface, 8);

//preface.add(new Paragraph("This document is a preliminary version and not subject to your license agreement or any other agreement with vogella.com ;-).",
//			redFont));

	document.add(preface);
	// Start a new page
	document.newPage();
}



private static void createTable(Paragraph preface, Map inputExcel)
		throws BadElementException {
	Long columnCount = (Long) inputExcel.get("headercount");
	// t.setBorderColor(BaseColor.GRAY);
	// t.setPadding(4);
	// t.setSpacing(4);
	// t.setBorderWidth(1);
	ArrayList data = (ArrayList) inputExcel.get("data");
//	Long columnCount = (Long) inputExcel.get("headercount");
	 StringTokenizer st = null; 
	 String string = "";
	 int k = 0;

	 try {

	PdfPTable table = new PdfPTable(columnCount.intValue());
	
	 table.setTotalWidth(550);
	
	 table.setLockedWidth(false);
	 
	 table.setWidthPercentage(100f);
	// table.setWidths(new int[]{3, 3,5,5,8,3,4,5,8});
	// table.calculateHeights(); // I add this line 
	
	PdfPCell c1 = null;

	
	for (int i = 0; i < data.size(); i++) {
		 st = new StringTokenizer((String)data.get(i), "|") ;
		 k = 0;
			 while(st.hasMoreTokens()) {
            	 string = new String();
                string = st.nextToken();
                
               if(k < columnCount) {
               		if(i == 0){
               			c1 = new PdfPCell(new Phrase(string,smallBold));
               			c1.setHorizontalAlignment(Element.ALIGN_CENTER);
               			c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
               			//c1.setFixedHeight(50);
               			//c1.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
               			table.setHeaderRows(1);
                        c1.setNoWrap(false); 
                     //   c1.setPadding(10.0f);
                        table.addCell(c1);
               			
               		}else{
               			c1 = new PdfPCell(new Phrase(string,subFont));
               			table.setHeaderRows(1);
               			if(k==0){
               				c1.setHorizontalAlignment(Element.ALIGN_CENTER);
               			}
               			else{
               				c1.setHorizontalAlignment(Element.ALIGN_LEFT);
               			}
               			
                        c1.setNoWrap(false);
                   //    c1.setFixedHeight(45);
                     //   c1.setPadding(10.0f);
                     //   table.setExtendLastRow(true);
                        table.addCell(c1);
               			
               		}
                }
               
               k++;
			 }
			 
		
		// Second column
	//	addLabel(sheet, 1, i, "Another text");
	}

	c1.setHorizontalAlignment(Element.ALIGN_CENTER);


	preface.add(table);
	 } catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

}



private static void addEmptyLine(Paragraph paragraph, int number) {
	for (int i = 0; i < number; i++) {
		paragraph.add(new Paragraph(" "));
	}
}

%>
<%

	Connection con=null;
	ResultSet rs=null;
	Statement stmt=null;
	try{
			
			con = com.eResorts.ConnectionPool.getConnection();
			stmt =  con.createStatement();
			String Query = "Select * from feedback order by `FId`";
			rs = stmt.executeQuery(Query);
			MemberReviewsVO memberReviewsVO1 = null;
			List<MemberReviewsVO> memberReviewsVOList = null;
			ReportBean reportBean = (ReportBean)session.getAttribute("reportBean");
			memberReviewsVOList = reportBean.getMemberReviewsVOList();
			String inputFilePath = "D:/PDF/PSRF_GENERATE_PDF.pdf";
			inputFile = inputFilePath;
			String reportname = "PSRF_REPORT";
			Long headercount = new Long(4);
			Map inputExcel = new HashMap();
			
			inputExcel.put("reportname",reportname);
			inputExcel.put("headercount",headercount);
			List data = new ArrayList();
			String header = "FId|UserID|Feedback|Date Of Submittion";
			StringBuilder sb = new StringBuilder();
			data.add(header);
			
			%>
						<table align="center" width="60%">
						<tr ><a href="genratePdfReport.jsp">Click here to generate pdf</a></tr>
							<tr class=row_title>
							<th align="left">FId</th><th align="left">UserID</th><th align="center">Feedback</th><th align="left">Date Of Submittion</th>
							</tr>
					<%
			int rCount=0;
		//	while(rs.next())
		for(MemberReviewsVO memberReviewsVO  :memberReviewsVOList)
			{
				// memberReviewsVO = new MemberReviewsVO(); 
			//	memberReviewsVO.setDateOfSubmittion(rs.getString(4));
			//	memberReviewsVO.setFeedback(rs.getString(3));
			//	memberReviewsVO.setUserID(rs.getString(2));
			//	memberReviewsVO.setfId(rs.getString(1));
				sb.append(memberReviewsVO.getDateOfSubmittion() +"|");
				sb.append(memberReviewsVO.getFeedback() +"|");
				sb.append(memberReviewsVO.getUserID() +"|");
				sb.append(memberReviewsVO.getfId() );
				%>
					<tr class= <%=(rCount%2!=0)? "row_even" : "row_odd"%>>
						<td><%=memberReviewsVO.getDateOfSubmittion() %></td>
						<td><%=memberReviewsVO.getFeedback()%></td>
						<td><%=memberReviewsVO.getUserID()%></td>
						<td><%=memberReviewsVO.getfId()%></td>
					</tr>
					<%
				rCount++;
					data.add(sb.toString());
				//	memberReviewsVOList.add(memberReviewsVO);
			}
			
		inputExcel.put("data",data);
			%><%=data.toString() %><%
			if( rCount == 0)	{%><h3 align=center>Sorry No records Found</h3><% }
			rs.close();
			stmt.close();
			con.close();
			GeneratePdfFile gpdf = new GeneratePdfFile(inputExcel,inputFilePath);
			String returnStatus = gpdf.createPdf();
			//reportBean.setMemberReviewsVOList(memberReviewsVOList);
			//session.setAttribute("reportBean", reportBean);
		}catch(Exception e){
			rs.close();
			stmt.close();
			con.close();
			%><%=e%><%
		}
	
%>
</BODY>
<iframe src = "<%=inputFile %>" width="100%" height="1000px"></iframe>
</PRE>